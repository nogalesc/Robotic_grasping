#include "common.h"
#include "feature.h"
#include "thr_pool.h"
#include "histogram.h"
//#include "point_cloud_feature_test.h"

// using namespace std;
char *modelfile = "pc_model.mod";
// char *modelfile = "pc_model_poly.mod";
// char *modelfile = "pc_model_rbf.mod";
char *imgFile = "left0121.pgm";
char *pcdFile = "pcd0121.txt";
char *anglesFile = "pcd0121_angles.txt";
char *rectPosFile = "left0121_pos.txt";
char *rectNegFile = "left0121_neg.txt";
// char *imgFile = "left0000.pgm";
// char *pcdFile = "pcd0000.txt";
// char *anglesFile = "pcd0000_angles.txt";
// char *rectPosFile = "left0000_pos.txt";
// char *rectNegFile = "left0000_neg.txt";
const int xCrop = 400;
const int nTop = 100;
vector < double >xSizes;
vector < double >ySizes;
vector < double >angles;
const double dx = 10, dy = 10;
const int nBins = 9;
// Used for threading
vector < ScoredRect > vRect;
pthread_mutex_t mutex;

static int work_count = 0;
typedef struct
{
	IntegralHistogram *zIntHist, *normZIntHist, *curvIntHist;
  CvRect rect;
  ScoredRect r;
  MODEL *model;
} arg_t;
arg_t *arg(IntegralHistogram *zIntHist, IntegralHistogram *normZIntHist, IntegralHistogram *curvIntHist
	, CvRect rect, ScoredRect r, MODEL * model);
void *work(void *in);

void init();

// From SVMDataGenerator
vector<CvMat*> filters;
void initFilters();
CvMat* getFilter(int idx);
void calculateFilterBanks17(IplImage* img, vector<CvMat*>& H);


int main(int argc, char *argv[]) {
	IplImage *im = cvLoadImage(imgFile);
    vector<CvMat*> fm;
    calculateFilterBanks17(im, fm);
    char buff[50];
    for (int i=0;i<fm.size();i++) {
        cout << fm[i]->width << " " << fm[i]->height << " " << cvGetElemType(fm[i]) << " ";
        sprintf(buff,"pm%02d.ppm",i);
        cout << buff << endl;
        cvSaveImage(buff,fm[i]);
    }
    return 0;
	//~ vector<Rect> rects;
	//~ loadRects(rects,rectPosFile,rectNegFile);
	//~ for (int i=0;i<rects.size();i++) {
	//~ cout << rects[i] << endl;
	//~ }
	vector<float> joint_angles;
	vector<float> t_matrix;
	pcl::PointCloud<pcl::PointXYZ> cloud;
	pcl::PointCloud<pcl::Normal> normals;
	vector<int> indices;
	int normals_k_neighbors = 50;
	double minVal, maxVal;
  vector<CvMat*> matXYZ, matNorms;
  IplImage *zImg, *normZImg, *curvImg, *maskImg;
  CvMat *zMat, *mask;
  CvMat *normZMat;
  CvMat *curvMat;
	CvMat tmp1, tmp2, tmp3, tmp4, tmp5, tmp6; // Used to hold cvMats
  vector<float> hist;
  vector<float> feature_vec;
  vector<float> vecZ, vecNormZ, vecCurv;
  float binWidth;

	init();
	loadPCDFile(pcdFile,cloud,indices);
	calculateNormals(cloud,normals,normals_k_neighbors);
	matXYZ = convertXYZToCvMat(indices, cloud);
	matNorms = convertNormalsToCvMat(indices, normals, true);
	
	float totalWidth = matXYZ[3]->width;
	float totalHeight = matXYZ[3]->height;
	
	//IplImage *img = loadAndConvertImage(imgFile, xCrop);
	MODEL *model = readAndInitModel(modelfile);
	//CvMat temp;

	thr_pool_t *pool;
	int nWork = 0;
	long t1 = get_runtime();
	CvMat *pts = cvCreateMat(3, 4, CV_32FC1);
	for (int k = 0; k < 4; k++)
		cvmSet(pts, 2, k, 1.0);
	CvMat *rotatedPts = cvCreateMat(2, 4, CV_32FC1);
	CvMat *rotMatrix = cvCreateMat(2, 3, CV_32FC1);
	for (unsigned int c = 0; c < angles.size(); c++) {
		CvMat subMat;
		
		cvGetSubRect(matXYZ[2], &subMat, cvRect(xCrop,0,matXYZ[2]->width-xCrop,matXYZ[2]->height));
		zImg = imrotate(&subMat, angles[c]);
		
		cvGetSubRect(matNorms[2], &subMat, cvRect(xCrop,0,matNorms[2]->width-xCrop,matNorms[2]->height));
		normZImg = imrotate(&subMat, angles[c]);
		
		cvGetSubRect(matNorms[3], &subMat, cvRect(xCrop,0,matNorms[3]->width-xCrop,matNorms[3]->height));
		curvImg = imrotate(&subMat, angles[c]);
		
		cvGetSubRect(matXYZ[3], &subMat, cvRect(xCrop,0,matXYZ[3]->width-xCrop,matXYZ[3]->height));
		maskImg = imrotate(&subMat, angles[c], 0.0);
		
		mask = cvGetMat(maskImg, &tmp1);
		zMat = cvGetMat(zImg, &tmp2);
		normZMat = cvGetMat(normZImg, &tmp3);
		curvMat = cvGetMat(curvImg, &tmp4);
		
		// Need to erode the mask due to interpolation errors from rotating
		cvErode(mask,mask);
		
		cv2DRotationMatrix(cvPoint2D32f
		        (mask->width / 2.0, mask->height / 2.0),
		        -angles[c], 1.0, rotMatrix);
		
		float *ranges;
		int nBinsTotal;
		IntegralHistogram *zIntHist, *normZIntHist, *curvIntHist;
		
		binWidth = 0.05;
		cvMinMaxLoc(zMat, &minVal, &maxVal, NULL, NULL, mask);
		minVal -= fmod(minVal,binWidth);
		maxVal -= fmod(maxVal,binWidth) - binWidth;
		minVal = (minVal < 0.0 ? 0.0 : minVal);
		nBinsTotal = (int)((maxVal-minVal)/binWidth);
		ranges = new float[nBinsTotal+1];
		ranges[0] = minVal; ranges[nBinsTotal] = maxVal;
		for (int i=1;i<nBinsTotal;i++) {
			ranges[i] = minVal + (maxVal - minVal)/((double)nBins) * ((double)i);
		}
		zIntHist = calcIntegralHistogram(zMat,nBinsTotal,ranges,mask);
		delete[] ranges;
		
		binWidth = 0.1;
		cvMinMaxLoc(normZMat, &minVal, &maxVal, NULL, NULL, mask);
		minVal -= fmod(minVal,binWidth);
		maxVal -= fmod(maxVal,binWidth) - binWidth;
		minVal = (minVal < 0.0 ? 0.0 : minVal);
		nBinsTotal = (int)((maxVal-minVal)/binWidth);
		ranges = new float[nBinsTotal+1];
		ranges[0] = minVal; ranges[nBinsTotal] = maxVal;
		for (int i=1;i<nBinsTotal;i++) {
			ranges[i] = minVal + (maxVal - minVal)/((double)nBins) * ((double)i);
		}
		normZIntHist = calcIntegralHistogram(normZMat,nBinsTotal,ranges,mask);
		delete[] ranges;
		
		binWidth = 0.01;
		cvMinMaxLoc(curvMat, &minVal, &maxVal, NULL, NULL, mask);
		minVal -= fmod(minVal,binWidth);
		maxVal -= fmod(maxVal,binWidth) - binWidth;
		minVal = (minVal < 0.0 ? 0.0 : minVal);
		nBinsTotal = (int)((maxVal-minVal)/binWidth);
		ranges = new float[nBinsTotal+1];
		ranges[0] = minVal; ranges[nBinsTotal] = maxVal;
		for (int i=1;i<nBinsTotal;i++) {
			ranges[i] = minVal + (maxVal - minVal)/((double)nBins) * ((double)i);
		}
		curvIntHist = calcIntegralHistogram(curvMat,nBinsTotal,ranges,mask);
		delete[] ranges;
		
		for (unsigned int a = 0; a < xSizes.size(); a++) {
			for (unsigned int b = 0; b < ySizes.size(); b++) {
				int _dx = xSizes[a];
				int _dy = ySizes[b];
				pool = thr_pool_create(16, 16, 0, NULL);
				printf("%d %d %.1f %.0f %.0f\n", mask->width, mask->height, angles[c], xSizes[a], ySizes[b]);
				for (int j = 0; j < mask->height - _dy; j += dy) { // Rows
					for (int i = 0; i < mask->width - _dx; i += dx) { // Cols
				//~ for (int j = 310; j < mask->height - _dy; j += dy) { // Rows
					//~ for (int i = 230; i < mask->width - _dx; i += dx) { // Cols
						if ((cvmGet(normZMat, j, i) ) < 0 ||
						        (cvmGet(normZMat, j + _dy - 1, i) ) < 0 ||
						        (cvmGet(normZMat, j, i + _dx - 1) ) < 0 ||
						        (cvmGet(normZMat, j + _dy - 1, i + _dx - 1) ) < 0 ) {
							continue;
						}
						cvmSet(pts, 0, 0, i);
						cvmSet(pts, 1, 0, j);
						cvmSet(pts, 0, 1, i);
						cvmSet(pts, 1, 1, (j + _dy));
						cvmSet(pts, 0, 2, (i + _dx));
						cvmSet(pts, 1, 2, (j + _dy));
						cvmSet(pts, 0, 3, (i + _dx));
						cvmSet(pts, 1, 3, j);

						cvGEMM(rotMatrix, pts, 1.0, NULL, 0.0, rotatedPts);
						vector<double> x, y;
						x.resize(4);
						y.resize(4);
						bool outlier = false;
						//~ cout << "ITER: " << i << ", " << j << endl;
						for (int k = 0;k < 4;k++) {
							//printf("points %d: %g %g\n",k,cvmGet(rotatedPts,0,k));
							x[k] = xCrop + cvmGet(rotatedPts, 0, k) - (((float)(mask->width)) / 2.0) + ((totalWidth-xCrop) / 2.0);
							y[k] = cvmGet(rotatedPts, 1, k) - (((float)(mask->height)) / 2.0) + (totalHeight / 2.0);
							//~ cout << x[k] << "," << y[k] << " ";
							if (x[k] < xCrop || y[k] < 0 || x[k] >= totalWidth || y[k] >= totalHeight) {
								outlier = true;
								break;
							}
							//y[k] = cvmGet(rotatedPts,1,k)/yScales[b];
						}
						//~ cout << endl;
						if (outlier) continue;

						/*
						if (outlier) {
						    for (int p=0;p<4;p++)
						        printf("(%g, %g) ",x[p],y[p]);
						    printf("\n");
						    printf("%g %g %g %d %d\n",xScales[a],yScales[b],angles[c],i,j);
						    printf("%g %g %g %g\n",cvmGet(mat, j, i), cvmGet(mat, j + 19, i)
						        , cvmGet(mat, j + 19, i + 19), cvmGet(mat, j, i + 19));
						    printf("im_resized : %d %d\n", im_rotated->width, im_rotated->height);
						    printf("im_rotated : %d %d\n", im_resized->width, im_resized->height);
						    return -1;
						}*/
						ScoredRect sr = ScoredRect(Rect(x, y), 0.0);
						thr_pool_queue(pool, work, arg(zIntHist, normZIntHist, curvIntHist, cvRect(i, j, _dx, _dy), sr, model));
						//~ work((void*)(arg(zIntHist, normZIntHist, curvIntHist, cvRect(i, j, _dx, _dy), sr, model)));
						nWork++;
						// eval(mat, cvRect(i, j, 20, 20), model);
					}
				}
				thr_pool_wait(pool);
				thr_pool_destroy(pool);
				sort(vRect.begin(), vRect.end());
				vRect.resize(nTop);
				// cvReleaseMat(&mat);
				//~ cvReleaseImage(&im_resized);
				printf("%d %d %d: %d evals\n", a, b, c, nWork);
			}
		}
		//~ if (c != 0)
			//~ cvReleaseImage(&im_rotated);
		
		
		releaseIntegralHistogram(&zIntHist);
		releaseIntegralHistogram(&normZIntHist);
		releaseIntegralHistogram(&curvIntHist);
		cvReleaseImage(&zImg);
		cvReleaseImage(&normZImg);
		cvReleaseImage(&curvImg);
		cvReleaseImage(&maskImg);
	}
	cvReleaseMat(&rotMatrix);
	cvReleaseMat(&pts);
	cvReleaseMat(&rotatedPts);
    for (int i=0;i<matXYZ.size();i++) {
      cvReleaseMat(&(matXYZ[i]));
    }
    for (int i=0;i<matNorms.size();i++) {
      cvReleaseMat(&(matNorms[i]));
    }

	// printf("%d of %d done\n",work_count,nWork);
	// printf("%d of %d done\n",work_count,nWork);
	long runtime = get_runtime() - t1;
	printf("Runtime in cpu-seconds: %.4f\n", (float)(runtime / 100.0));
	//sort(vRect.begin(), vRect.end());
	//cvReleaseImage(&img);
	IplImage *img = cvLoadImage(imgFile);
    int i = 0;
	for (; i < 1; i++) {
		ScoredRect sr = vRect[i];
		//printf("%.4g %g %g %g %g %g\n", sr.score, sr.x, sr.y, sr.w, sr.h, sr.t);
		vector<double> x = sr.rect.x;
		vector<double> y = sr.rect.y;
		printf("%.4g", sr.score);
		for (unsigned int k = 0;k < x.size();k++)
			printf(" %g %g", x[k], y[k]);
		printf("\n");
		CvPoint  box[] = {x[0], y[0],  x[1], y[1],  x[2], y[2],  x[3], y[3]};
		CvPoint* boxArr[1] = {box};
		int      nCurvePts[1] = {4};
		int      nCurves = 1;
		int      isCurveClosed = 0;
		int      lineWidth = 1;
		cvPolyLine(img, boxArr, nCurvePts, nCurves, isCurveClosed, cvScalar(255, 0, 0), lineWidth);
	}
    cvSaveImage("res_1.pgm",img);
	for (; i < 2; i++) {
		ScoredRect sr = vRect[i];
		//printf("%.4g %g %g %g %g %g\n", sr.score, sr.x, sr.y, sr.w, sr.h, sr.t);
		vector<double> x = sr.rect.x;
		vector<double> y = sr.rect.y;
		printf("%.4g", sr.score);
		for (unsigned int k = 0;k < x.size();k++)
			printf(" %g %g", x[k], y[k]);
		printf("\n");
		CvPoint  box[] = {x[0], y[0],  x[1], y[1],  x[2], y[2],  x[3], y[3]};
		CvPoint* boxArr[1] = {box};
		int      nCurvePts[1] = {4};
		int      nCurves = 1;
		int      isCurveClosed = 0;
		int      lineWidth = 1;
		cvPolyLine(img, boxArr, nCurvePts, nCurves, isCurveClosed, cvScalar(255, 0, 0), lineWidth);
	}
    cvSaveImage("res_2.pgm",img);
	for (; i < 5; i++) {
		ScoredRect sr = vRect[i];
		//printf("%.4g %g %g %g %g %g\n", sr.score, sr.x, sr.y, sr.w, sr.h, sr.t);
		vector<double> x = sr.rect.x;
		vector<double> y = sr.rect.y;
		printf("%.4g", sr.score);
		for (unsigned int k = 0;k < x.size();k++)
			printf(" %g %g", x[k], y[k]);
		printf("\n");
		CvPoint  box[] = {x[0], y[0],  x[1], y[1],  x[2], y[2],  x[3], y[3]};
		CvPoint* boxArr[1] = {box};
		int      nCurvePts[1] = {4};
		int      nCurves = 1;
		int      isCurveClosed = 0;
		int      lineWidth = 1;
		cvPolyLine(img, boxArr, nCurvePts, nCurves, isCurveClosed, cvScalar(255, 0, 0), lineWidth);
	}
    cvSaveImage("res_5.pgm",img);
	for (; i < 20; i++) {
		ScoredRect sr = vRect[i];
		//printf("%.4g %g %g %g %g %g\n", sr.score, sr.x, sr.y, sr.w, sr.h, sr.t);
		vector<double> x = sr.rect.x;
		vector<double> y = sr.rect.y;
		printf("%.4g", sr.score);
		for (unsigned int k = 0;k < x.size();k++)
			printf(" %g %g", x[k], y[k]);
		printf("\n");
		CvPoint  box[] = {x[0], y[0],  x[1], y[1],  x[2], y[2],  x[3], y[3]};
		CvPoint* boxArr[1] = {box};
		int      nCurvePts[1] = {4};
		int      nCurves = 1;
		int      isCurveClosed = 0;
		int      lineWidth = 1;
		cvPolyLine(img, boxArr, nCurvePts, nCurves, isCurveClosed, cvScalar(255, 0, 0), lineWidth);
	}
    cvSaveImage("res_20.pgm",img);
	for (; i < 50; i++) {
		ScoredRect sr = vRect[i];
		//printf("%.4g %g %g %g %g %g\n", sr.score, sr.x, sr.y, sr.w, sr.h, sr.t);
		vector<double> x = sr.rect.x;
		vector<double> y = sr.rect.y;
		printf("%.4g", sr.score);
		for (unsigned int k = 0;k < x.size();k++)
			printf(" %g %g", x[k], y[k]);
		printf("\n");
		CvPoint  box[] = {x[0], y[0],  x[1], y[1],  x[2], y[2],  x[3], y[3]};
		CvPoint* boxArr[1] = {box};
		int      nCurvePts[1] = {4};
		int      nCurves = 1;
		int      isCurveClosed = 0;
		int      lineWidth = 1;
		cvPolyLine(img, boxArr, nCurvePts, nCurves, isCurveClosed, cvScalar(255, 0, 0), lineWidth);
	}
    cvSaveImage("res_50.pgm",img);
	for (; i < 100; i++) {
		ScoredRect sr = vRect[i];
		//printf("%.4g %g %g %g %g %g\n", sr.score, sr.x, sr.y, sr.w, sr.h, sr.t);
		vector<double> x = sr.rect.x;
		vector<double> y = sr.rect.y;
		printf("%.4g", sr.score);
		for (unsigned int k = 0;k < x.size();k++)
			printf(" %g %g", x[k], y[k]);
		printf("\n");
		CvPoint  box[] = {x[0], y[0],  x[1], y[1],  x[2], y[2],  x[3], y[3]};
		CvPoint* boxArr[1] = {box};
		int      nCurvePts[1] = {4};
		int      nCurves = 1;
		int      isCurveClosed = 0;
		int      lineWidth = 1;
		cvPolyLine(img, boxArr, nCurvePts, nCurves, isCurveClosed, cvScalar(255, 0, 0), lineWidth);
	}
    cvSaveImage("res_100.pgm",img);

	/* printf("feature: %ld %ld %f
	   %ld\n",feature->docnum,feature->queryid,feature->costfactor,feature->slackid);
	   SVECTOR* vec = feature->fvec; printf("vec: %f
	   %f\n",vec->twonorm_sq,vec->factor); WORD* w = vec->words; int i=0; while
	   (w[i].wnum) { printf("Word: %ld %f\n",w[i].wnum,w[i].weight); i++; } */

	/*
	   IplImage* img2 = imrotate(img, 30.0); cvShowImage("Example1", img2);
	   cvWaitKey(0); cvReleaseImage( &img2 ); IplImage* img3 = imrotate(img,
	   120); cvShowImage("Example1", img3); cvWaitKey(0); cvReleaseImage( &img3
	   ); IplImage* img4 = imrotate(img, 210); cvShowImage("Example1", img4);
	   cvWaitKey(0); cvReleaseImage( &img4 ); IplImage* img5 = imrotate(img,
	   300); cvShowImage("Example1", img5); cvWaitKey(0); cvReleaseImage( &img5
	   ); */
	// cvNamedWindow("Results", CV_WINDOW_AUTOSIZE);
	// cvShowImage("Results", img);
	// cvWaitKey(0);
	cvReleaseImage(&img);
	// cvDestroyWindow("Results");
	return 0;
}

void init() {
	for (int i=20; i<=100; i+= 15) {
		xSizes.push_back(i);
	}
	for (int i=20; i<=100; i+= 15) {
		ySizes.push_back(i);
	}

	for (int i = 0; i < 18; i++)
		angles.push_back(((double)i) * 10.0);
}

arg_t *arg(IntegralHistogram *zIntHist, IntegralHistogram *normZIntHist, IntegralHistogram *curvIntHist
	, CvRect rect, ScoredRect r, MODEL * model)
{
	arg_t *t = new arg_t();
  if (t == NULL)
    printf("MALLOC failed at arg!\n");
	t->zIntHist = zIntHist;
	t->normZIntHist = normZIntHist;
	t->curvIntHist = curvIntHist;
  t->rect = rect;
  t->model = model;
  t->r = r;
  return t;
}
//~ arg_t *arg(CvMat * mat, CvRect rect, ScoredRect r, MODEL * model)
//~ {
  //~ arg_t *t = new arg_t();
  //~ if (t == NULL)
    //~ printf("MALLOC failed at arg!\n");
  //~ t->mat = mat;
  //~ t->rect = rect;
  //~ t->model = model;
  //~ t->r = r;
  //~ return t;
//~ }
void *work(void *in) {
	arg_t *t = (arg_t *) in;
	ScoredRect rr = t->r;
	vector<float> fv1, fv2, fv3;
	//~ cout << "\nFV1:\n";
	getHistogramFeatureVector(t->zIntHist, nBins, (t->rect).y, (t->rect).x, (t->rect).height, (t->rect).width, fv1, true);
	//~ for (int i=0;i<fv1.size();i++) {
		//~ cout << fv1[i] << " ";
		//~ if (i%9 == 8) cout << endl;
	//~ }
	//~ cout << "\nFV2:\n";
	getHistogramFeatureVector(t->normZIntHist, nBins, (t->rect).y, (t->rect).x, (t->rect).height, (t->rect).width, fv2, false);
	//~ for (int i=0;i<fv2.size();i++) {
		//~ cout << fv2[i] << " ";
		//~ if (i%9 == 8) cout << endl;
	//~ }
	getHistogramFeatureVector(t->curvIntHist, nBins, (t->rect).y, (t->rect).x, (t->rect).height, (t->rect).width, fv3, false);
	vector<float> fv;
	fv.reserve(fv1.size()+fv2.size()+fv3.size());
	fv.insert(fv.end(), fv1.begin(), fv1.end());
	fv.insert(fv.end(), fv2.begin(), fv2.end());
	fv.insert(fv.end(), fv3.begin(), fv3.end());
	//~ cout << "\nFV3:\n";
	//~ for (int i=0;i<fv.size();i++) {
		//~ cout << fv[i] << " ";
		//~ if (i%9 == 8) cout << endl;
	//~ }
	//~ cout << fv.size() << endl;
	DOC *doc = vectorToDoc(fv);
	
	rr.score = eval(doc, t->model);
	// printf("%g\n",res);
	(void)pthread_mutex_lock(&mutex);
	vRect.push_back(rr);
	work_count++;
	(void)pthread_mutex_unlock(&mutex);
	delete t;
	return NULL;
}

void initFilters() {
	int n, m;
	double x;

	filters.resize(17);
	ifstream fin("filters.txt");
	for (int i = 0; i < 17; i++) {
		fin >> n >> m;
		filters[i] = cvCreateMat(n, m, CV_32FC1);
		for (int j = 0; j < n; j++)
			for (int k = 0; k < m; k++) {
				fin >> x;
				cvmSet(filters[i], j, k, x);
			}
	}
}

CvMat* getFilter(int idx) {
	if (filters.empty())
		initFilters();

	return idx < (int)filters.size() ? filters[idx] : NULL;
}

void calculateFilterBanks17(IplImage* img, vector<CvMat*>& H) {

	IplImage *ycbcrImg, *yImg, *cb, *cr;

	ycbcrImg = cvCreateImage(cvSize(img->width, img->height), img->depth,img->nChannels);
	yImg = cvCreateImage(cvSize(img->width, img->height), img->depth, 1);
	cb = cvCreateImage(cvSize(img->width, img->height), img->depth, 1);
	cr = cvCreateImage(cvSize(img->width, img->height), img->depth, 1);
	cvCvtColor(img, ycbcrImg, CV_RGB2YCrCb);
	cvSplit(ycbcrImg, yImg, cb, cr, 0);

	H.resize(17);
	for (int i = 0; i < (int)H.size(); i++) {
		H[i] = cvCreateMat(img->height, img->width, CV_32FC1);

		if (i == 10){
			cvFilter2D(cb, H[i], getFilter(i));
		}else if (i == 11){
			cvFilter2D(cr, H[i], getFilter(i));
	    }else{
			cvFilter2D(yImg, H[i], getFilter(i));
	    }

		//normalize them
//		double minv, maxv;
//		cvMinMaxLoc(H[i], &minv, &maxv);
		cvNormalize(H[i], H[i], 0, 255, CV_MINMAX);
	}
	cvReleaseImage(&ycbcrImg);
	cvReleaseImage(&yImg);
	cvReleaseImage(&cb);
	cvReleaseImage(&cr);
}
